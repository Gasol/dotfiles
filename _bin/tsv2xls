#!/usr/bin/env groovy
/**
 * Copyright (c) 2013, Gasol Wu <gasol.wu@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the <organization> nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL Gasol Wu BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

@Grab(group='org.apache.poi', module='poi-ooxml', version='3.9')
import org.apache.poi.ss.usermodel.WorkbookFactory
import org.apache.poi.ss.usermodel.Cell
import org.apache.poi.xssf.usermodel.XSSFWorkbook
import org.apache.poi.poifs.filesystem.NPOIFSFileSystem


class Tsv2xls {

    def infile

    def sheetName

    def outFile

    Tsv2xls(file) {
        this.infile = file
    }

    void write() {
        def wb = new XSSFWorkbook();
        def sheet = wb.createSheet(this.sheetName)
        FileOutputStream out = new FileOutputStream(this.outFile);
        def rowNum = 0
        new File(this.infile).eachLine { line ->
            def row = sheet.createRow(rowNum++)
            line.split(/	/).eachWithIndex { col, index ->
                def cell = row.createCell(index)
                cell.setCellType(Cell.CELL_TYPE_STRING);
                cell.setCellValue(col)
            }
        }
        wb.write(out);
        out.close();
    }

    static main(args) {
        def cli = new CliBuilder(usage: 'tsv2xls [file...]')
        cli.with {
            usage: 'Self'
            h longOpt: 'help', 'Usage information'
            s longOpt: 'sheet', args: 1, 'Given sheet name'
            o longOpt: 'output', args: 1, 'Outfile'
        }

        def opt = cli.parse(args)
        if (opt.h) {
            cli.usage()
            return
        }
        def fileName = opt.arguments()[0]
        if (!fileName) {
            cli.usage()
            return
        }
        def file = new File(fileName)

        def tsv2xls = new Tsv2xls(fileName)
        tsv2xls.sheetName = opt.s ?: 'Untitled'
        def baseName = file.name.replaceFirst(~/\.[^\.]+$/, '')
        tsv2xls.outFile = opt.n ?: "${baseName}.xlsx"
        try {
            tsv2xls.write()
        } catch (Exception e) {
            println e.message
            System.exit(1)
        }
    }
}
